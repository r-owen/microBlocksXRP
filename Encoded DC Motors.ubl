module 'Encoded DC Motors' Output
author 'Russell Owen'
version 0 9 
depends PID 
description 'Drive DC motors with encoders'
variables edcmotors__encoderPosition _edcmotors__initialized _edcmotors__running _edcmotors__numMotors _edcmotors__maxSpeed _edcmotors__pinDutyCycle _edcmotors__pinEncoderA _edcmotors__pinEncoderB _edcmotors__pinDirection _edcmotors__prevEncoderAState _edcmotors__prevEncoderBState _edcmotors__targetStartMillis _edcmotors__targetList _edcmotors__pCoeff _edcmotors__iCoeff _edcmotors__dCoeff _edcmotors__deadband _edcmotors__minEffort _edcmotors__maxEffort _edcmotors__maxIntegral 

  spec ' ' 'edcmotors_moveMotorAtSpeed' 'move motor _ at speed _ (encoder counts/sec)' 'num num' 1 500
  spec ' ' 'edcmotors_moveMotorDistance' 'move motor _ distance _ (encoder counts) at speed _ (counts/sec)' 'num num num' 1 100 500
  spec ' ' 'edcmotors_moveMotorWithEffort' 'move motor _ with effort _ (-1023 to 1023)' 'num num' 1 250
  spec ' ' 'edcmotors_resetMotorEncoders' 'reset motor encoders _ : _ : ...' 'num num num num' 1 2 3 4
  spec ' ' 'edcmotors_stopAllMotors' 'stop all motors'
  spec ' ' 'edcmotors_stopMotors' 'stop motors _ : _ : ...' 'num num num num' 1 2 3 4
  spec ' ' 'edcmotors_waitForMotorsToStop' 'wait for motors to stop _ : _ : ...' 'num num num num' 1 2 3 4
  space
  spec ' ' '_edcmotors_basicMoveMotorWithEffort' '_basic move motor _ with effort _ (-1023 to 1023)' 'num num' 1 250
  spec ' ' '_edcmotors_driveMotorsToFollowTarget' '_drive motors to follow target'
  spec 'r' '_edcmotors_getTargetPositionSpeedRunning' '_get target position and speed for motor _ at time _ (msec, -1 for now)' 'num num' 1 -1
  spec 'r' '_edcmotors_addTime' '_add time _ duration _' 'num num' 0 0
  spec ' ' '_edcmotors_initLibrary' '_edcmotors init library'
  spec ' ' '_edcmotors_initVariables' '_edcmotors init variables'
  spec ' ' '_edcmotors_monitorEncoders' '_monitor motor encoders'
  spec ' ' '_edcmotors_stopOneMotor' '_stop one motor _' 'num' 1

to '_edcmotors_addTime' time duration {
  comment 'Add a duration to a time'
  local 'result' (time + duration)
  if (result < 0) {
    result += -1073741824
  }
  return result
}

to '_edcmotors_basicMoveMotorWithEffort' index effort {
  comment 'Implement edcmotors_moveMotorWithEffort. Assumes that _edcmotors_initLibrary has been called'
  analogWriteOp (at index _edcmotors__pinDutyCycle) (absoluteValue effort)
  digitalWriteOp (at index _edcmotors__pinDirection) (effort > 0)
}

to '_edcmotors_driveMotorsToFollowTarget' {
  comment 'Drive motors to follow the specified target position and speed.
This is a background task (infinite loop) that must be running,
in order for edcmotors_moveMotorAtSpeed and edcmotors_moveMotorDistance to work.'
  for index _edcmotors__numMotors {
    pid_resetPID index
  }
  '_edcmotors_initLibrary'
  local 'targetPositionAndSpeed' 0
  local 'targetPosition' 0
  local 'targetSpeed' 0
  local 'encoderPosition' 0
  local 'positionError' 0
  local 'correction' 0
  local 'effort' 0
  local 'running' (booleanConstant false)
  forever {
    for index _edcmotors__numMotors {
      if ((at index _edcmotors__targetStartMillis) >= 0) {
        targetPositionAndSpeed = ('_edcmotors_getTargetPositionSpeedRunning' index -1)
        targetPosition = (at 1 targetPositionAndSpeed)
        targetSpeed = (at 2 targetPositionAndSpeed)
        running = (at 3 targetPositionAndSpeed)
        encoderPosition = (at index edcmotors__encoderPosition)
        comment 'Note: simple subtraction handles encoder wraparound automatically'
        positionError = (targetPosition - encoderPosition)
        correction = (pid_computePID index positionError (at index _edcmotors__pCoeff) (at index _edcmotors__iCoeff) (at index _edcmotors__dCoeff) (at index _edcmotors__maxIntegral))
        comment 'Compute predicted ("feed forward") effort.'
        effort = ((targetSpeed * (at index _edcmotors__maxEffort)) / (at index _edcmotors__maxSpeed))
        comment 'If the predicted effort is too small to be useful, set it to 0,
in order to make the system more stable at the start and end of each move.'
        if ((absoluteValue effort) < (at index _edcmotors__maxEffort)) {
          effort = 0
        }
        effort += (correction / 1000)
        effort = (pid_constrainValue effort (at index _edcmotors__deadband) (at index _edcmotors__minEffort) (at index _edcmotors__maxEffort))
        comment 'Check that following is still wanted, just before commanding the motor.'
        if ((at index _edcmotors__targetStartMillis) >= 0) {
          '_edcmotors_basicMoveMotorWithEffort' index effort
          if running {
            _edcmotors__running = (_edcmotors__running | (1 << (index - 1)))
          } else {
            _edcmotors__running = (_edcmotors__running & ('~' (1 << (index - 1))))
          }
        }
      }
    }
  }
}

to '_edcmotors_getTargetPositionSpeedRunning' index atMillis {
  comment 'Compute the target position and speed for the specified motor at the specified time (msec, <0 for now).
Return a list with three elements:
* target position (encoder counts)
* target speed (encoder counts/second)
* running
Assumes that _edcmotors_initLibrary has been called.'
  if (atMillis < 0) {
    atMillis = (millisOp)
  }
  local 'startTimeMillis' 0
  local 'durationMillis' 0
  local 'targetList' (at index _edcmotors__targetList)
  local 'targetNode' 0
  local 'nodeDurationMillis' 0
  local 'startPosition' 0
  local 'startSpeed' 0
  local 'acceleration' 0
  local 'position' 0
  local 'speed' 0
  forever {
    comment 'Check list length and start time every time through the loop since another task may have changed while the loop starts over.'
    if ((size targetList) == 0) {
      comment 'No trajectory'
      return ('[data:makeList]' 0 0 (booleanConstant false))
    }
    startTimeMillis = (at index _edcmotors__targetStartMillis)
    if (startTimeMillis < 0) {
      return ('[data:makeList]' 0 0 (booleanConstant false))
    }
    durationMillis = (millisSince startTimeMillis atMillis)
    targetNode = (at 1 targetList)
    nodeDurationMillis = (at 1 targetNode)
    if (nodeDurationMillis == 0) {
      comment 'Final node; move forever at the specified speed'
      startPosition = (at 2 targetNode)
      speed = (at 3 targetNode)
      position = (startPosition + ((speed * durationMillis) / 1000))
      return ('[data:makeList]' position speed (booleanConstant true))
    } (nodeDurationMillis <= durationMillis) {
      comment 'Use this node'
      startPosition = (at 2 targetNode)
      startSpeed = (at 3 targetNode)
      acceleration = (at 4 targetNode)
      position = ((startPosition + ((startSpeed * durationMillis) / 1000)) + ((((acceleration * durationMillis) / 1000) * durationMillis) / 2000))
      speed = (startSpeed + ((acceleration * durationMillis) / 1000))
      return ('[data:makeList]' position speed (booleanConstant true))
    } else {
      comment 'This node has expired; discard it and try the next (if any)'
      startTimeMillis = ('_edcmotors_addTime' startTimeMillis nodeDurationMillis)
      '[data:delete]' 1 targetList
    }
  }
}

to '_edcmotors_initLibrary' {
  comment 'Initialize the DC Motors library.
Check motor power and initialize variables (if not already initialized).
Defaults to an XRP robot kit with 2 motors; change this code for other systems'
  if (not _edcmotors__initialized) {
    _edcmotors__numMotors = (edcmotors_getNumMotors)
    if (_edcmotors__numMotors == 0) {
      sayIt 'Error: edcmotors_getNumMotors is not defined, or is defined but returned 0'
      return
    }
    '_edcmotors_initVariables'
    '_edcmotors_initSystemVariables'
    _edcmotors__initialized = (booleanConstant true)
  }
  '_edcmotors_checkSystem'
  sendBroadcast '_edcmotors_monitorEncoders'
  sendBroadcast '_edcmotors_driveMotorsToFollowTarget'
}

to '_edcmotors_initVariables' {
  comment 'Initialize variables whose values do not depend on the type of system,
and create all lists (but do not set values) of variables that are system-specific.'
  _edcmotors__running = 0
  edcmotors__encoderPosition = (newList _edcmotors__numMotors 0)
  _edcmotors__prevEncoderAState = (newList _edcmotors__numMotors (booleanConstant false))
  _edcmotors__prevEncoderBState = (newList _edcmotors__numMotors (booleanConstant false))
  _edcmotors__targetStartMillis = (newList _edcmotors__numMotors -1)
  comment 'A list of target nodes, each of the form: [durationMillis startPosition startSpeed acceleration].
A duration of 0 indicates that this is the final node; continue at the specified speed (which is 0 for point to point moves)'
  _edcmotors__targetList = (newList _edcmotors__numMotors ('[data:makeList]'))
  comment 'The following lists are system specific, so their elements must be set elsewhere.'
  _edcmotors__pCoeff = (newList _edcmotors__numMotors 0)
  _edcmotors__iCoeff = (newList _edcmotors__numMotors 0)
  _edcmotors__dCoeff = (newList _edcmotors__numMotors 0)
  _edcmotors__deadband = (newList _edcmotors__numMotors 0)
  _edcmotors__minEffort = (newList _edcmotors__numMotors 0)
  _edcmotors__maxEffort = (newList _edcmotors__numMotors 0)
  _edcmotors__maxIntegral = (newList _edcmotors__numMotors 0)
  _edcmotors__maxSpeed = (newList _edcmotors__numMotors 0)
  _edcmotors__pinEncoderA = (newList _edcmotors__numMotors 0)
  _edcmotors__pinEncoderB = (newList _edcmotors__numMotors 0)
  _edcmotors__pinDirection = (newList _edcmotors__numMotors 0)
  _edcmotors__pinDutyCycle = (newList _edcmotors__numMotors 0)
}

to '_edcmotors_monitorEncoders' {
  comment 'Monitor the motor encoders.
This is a background tasks (and an infinite loop) which must be running
in order for the remaining code to know where the wheels are.
The encoders are assumed to be quadrature incremental encoders.'
  '_edcmotors_initLibrary'
  local 'encoderAState' (booleanConstant false)
  local 'encoderBState' (booleanConstant false)
  local 'prevEncoderAState' (booleanConstant false)
  local 'prevEncoderBState' (booleanConstant false)
  forever {
    for index _edcmotors__numMotors {
      encoderAState = (digitalReadOp (at index _edcmotors__pinEncoderA))
      encoderBState = (digitalReadOp (at index _edcmotors__pinEncoderB))
      prevEncoderAState = (at index _edcmotors__prevEncoderAState)
      prevEncoderBState = (at index _edcmotors__prevEncoderBState)
      if (encoderAState != prevEncoderAState) {
        atPut index _edcmotors__prevEncoderAState encoderAState
        atPut index edcmotors__encoderPosition ((at index edcmotors__encoderPosition) + (ifExpression (encoderAState == encoderBState) -1 1))
      } (encoderBState != prevEncoderBState) {
        atPut index _edcmotors__prevEncoderBState encoderBState
        atPut index edcmotors__encoderPosition ((at index edcmotors__encoderPosition) + (ifExpression (encoderAState == encoderBState) 1 -1))
      }
    }
  }
}

to '_edcmotors_stopOneMotor' index {
  '_edcmotors_initLibrary'
  atPut index _edcmotors__targetStartMillis -1
  atPut index _edcmotors__targetList ('[data:makeList]')
  analogWriteOp (at index _edcmotors__pinDutyCycle) 0
  _edcmotors__running = (_edcmotors__running & ('~' (1 << (index - 1))))
}

to edcmotors_moveMotorAtSpeed index speed {
  comment 'Move the specified motor at the specified speed (counts/sec)'
  '_edcmotors_initLibrary'
  comment 'Constrain the speed to a sane value: 80% of the unloaded max speed.
This makes it far more likely that the robot can actually obey the requested speed.'
  local 'maxRequestedSpeed' ((800 * (at index _edcmotors__maxSpeed)) / 1000)
  if ((absoluteValue speed) > maxRequestedSpeed) {
    speed = (pid_applySign speed maxRequestedSpeed)
  }
  atPut index _edcmotors__targetStartMillis -1
  edcmotors_resetMotorEncoders index
  atPut index _edcmotors__targetList ('[data:makeList]' ('[data:makeList]' 0 0 speed 0))
  _edcmotors__running = (_edcmotors__running | (1 << (index - 1)))
  atPut index _edcmotors__targetStartMillis (millisOp)
}

to edcmotors_moveMotorDistance index distance speed {
  comment 'Move the specified motor the specified distance (encoder counts) at the specified speed (counts/sec).'
  '_edcmotors_initLibrary'
  if (speed == 0) {
    sayIt 'speed=' speed 'must be non-zero'
    return
  }
  comment 'Constrain the speed to a sane value: 80% of the unloaded max speed.
This makes it far more likely that the robot can actually obey the requested speed.'
  local 'maxRequestedSpeed' ((800 * (at index _edcmotors__maxSpeed)) / 1000)
  if ((absoluteValue speed) > maxRequestedSpeed) {
    speed = (pid_applySign speed maxRequestedSpeed)
  }
  atPut index _edcmotors__targetStartMillis -1
  edcmotors_resetMotorEncoders index
  local 'durationMillis' ((distance * 1000) / speed)
  atPut index _edcmotors__targetList ('[data:makeList]' ('[data:makeList]' durationMillis 0 speed 0) ('[data:makeList]' 0 distance 0 0))
  _edcmotors__running = (_edcmotors__running | (1 << (index - 1)))
  atPut index _edcmotors__targetStartMillis (millisOp)
}

to edcmotors_moveMotorWithEffort index effort {
  comment 'Move the specified motor at the specified "effort", a value between -1023 and 1023.
Effort is the duty cycle of the drive signal to the motor (plus a sign signal),
and is roughly proportional to speed, at least if the motor has no load.
Warning:  geared motors have enough friction that they may not reliably move at low speeds.
For example the XRP wheels may not reliably move if the absolute value of effort is less than about 200.
Thus the usable range of effort is usually rather small.'
  '_edcmotors_initLibrary'
  comment 'Prevent _edcmotors_driveMotorsToFollowTarget from moving the motor'
  atPut index _edcmotors__targetStartMillis -1
  _edcmotors__running = (_edcmotors__running | (1 << (index - 1)))
  '_edcmotors_basicMoveMotorWithEffort' index effort
}

to edcmotors_resetMotorEncoders {
  '_edcmotors_initLibrary'
  for index (pushArgCount) {
    atPut (getArg index) edcmotors__encoderPosition 0
  }
}

to edcmotors_stopAllMotors {
  for index _edcmotors__numMotors {
    '_edcmotors_stopOneMotor' index
  }
}

to edcmotors_stopMotors {
  comment 'Stop the specified motors'
  for index (pushArgCount) {
    '_edcmotors_stopOneMotor' (getArg index)
  }
}

to edcmotors_waitForMotorsToStop {
  comment 'Wait for the specified motors to stop moving.
This is based on predicted end time, rather than actual motion, so is not exact.'
  local 'mask' 0
  for index (pushArgCount) {
    mask = (mask | (1 << ((getArg index) - 1)))
  }
  comment 'Constrain the mask to actual existing motors.'
  mask = (mask & ((1 << _edcmotors__numMotors) - 1))
  waitUntil ((mask & _edcmotors__running) == 0)
}

